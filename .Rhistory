install.packages("KernSmooth")
libary ("KernSmooth")
library ("KernSmooth")
install.packages("swirl")
install.packages("swirl")
library ("swirl")
swirl（）
swirl()
5 + 7
x <- 5 + 7
x
y <- x -3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555)
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt (z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c（0，10)
c(1,2,3,4) + c(1,10)
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
1:20
pi:10
15:1
`:`
?`:`
seq(1, 20)
seq(0, 10,by=0.5)
my_seq = seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), time = 10)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
above10 <- function(x){use <- x >10
x[use]}
above10
function(1)
function(1)
pollutantmean <- function(directory = getwd(), pollutant, id = 1:332) {
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
source('~/Downloads/specdata/pollutantmean.R')
pollutantmean("specdata", "sulfate", 1:10)
source('~/Downloads/specdata/pollutantmean.R')
pollutantmean("specdata", "sulfate", 1:10)
library(datasets)
data(iris)
mean(sepal.Length)
iris
?iris
?mean
iris.Sepal.Length
?iris
iris[1,1]
iris[,1]
mean(iris[,1])
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
library(datasets)
data(mtcars)
?mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
test <- sapply(split(mtcars$hp, mtcars$cyl), mean)
test
test[1,1]
test[1,0]
test[1]
test[3]-test[1]
debug(ls)
ls
ls
?iris
clear
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )
source('~/ProgrammingAssignment2/cachematrix.R')
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )
cacheSolve(a)
source('~/ProgrammingAssignment2/cachematrix.R')
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )
a
cacheSolve(a)
source('~/ProgrammingAssignment2/cachematrix.R')
source('~/ProgrammingAssignment2/cachematrix.R')
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )
cacheSolve(a)
source('~/ProgrammingAssignment2/cachematrix.R')
install.packages("RMySQL")
install.packages("rmysql")
library(httr)
myapp <- oauth_app("github","9253b74f5bf32709b285", "e0cd183c288cbeabbc7a482f17ee8930578837de")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
libray(httpuv)
library(httpuv)
install.packages("httpuv")
libray(httpuv)
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
install.packages("jsonlite")
library(jsonlite)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
View(json2)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
library(nlme)
libray(lattice)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim()
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?manip
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(scan, !is.na(r_version))
filter(!is.na(r_version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = (size-1000))
mutate(cran3, correct_size = (size + 1000))
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
swirl()
?rm
rm(list = ls())
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
submit()
submit()
tbl
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count>679)
top_counts
head(top_counts, 20)
arrange(top_counts, desc(count))
quantile(pack_su$unique, probs = 0.99)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
?chain
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res. Consult <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
submit()
students
students3
students3
submit()
?spread
submit()
submit()
submit()
extract_numeric("class5")
?mutate
submit()
submit()
submit()
submit()
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(final=c("passed", "passed","passed","passed",))
mutate(final=c("passed", "passed","passed","passed"))
mutate(final=("passed", "passed","passed","passed"))
mutate(final=("passed"))
mutate(final=c("passed"))
mutate(final=final
)
mutate(passed, final=c("passed", "passed","passed","passed"))
mutate(passed, status=c("passed", "passed","passed","passed"))
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?rbind_list
rbind_list(passed, failed)
sat
?separate
submit()
submit()
submit()
submit()
submit()
submit()
?separate
submit()
View(sat)
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
print
submit()
submit()
separate(part_sex, into = c("part", "sex"), sep = "\\_")
separate(sat, part_sex, into = c("part", "sex"), sep = "\\_")
submit()
submit()
submit()
submit()
install.packages('knitr')
library(knitr)
unzip("activity.zip")
data <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
data$month <- as.numeric(format(data$date, "%m"))
noNA <- na.omit(data)
rownames(noNA) <- 1:nrow(noNA)
head(noNA)
dim(noNA)
library(ggplot2)
setwd("~/RepData_PeerAssessment1")
unzip("activity.zip")
data <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
data$month <- as.numeric(format(data$date, "%m"))
noNA <- na.omit(data)
rownames(noNA) <- 1:nrow(noNA)
head(noNA)
dim(noNA)
library(ggplot2)
